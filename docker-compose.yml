services:
  core-api: # Переименовали web в core-api
    image: "backend-core-api:latest"
    build:
      context: .
      dockerfile: Dockerfile.core_api # Указываем отдельный Dockerfile
    working_dir: "/app"
    volumes:
      - .:/app
    command: uvicorn backend.core_api.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    restart: always
    env_file:
      - ".env"
    depends_on:
      - pg_database
      - rabbitmq

  bot-gateway: # Новый сервис для бота
    image: "backend-bot-gateway:latest"
    build:
      context: .
      dockerfile: Dockerfile.bot_gateway # Указываем отдельный Dockerfile
    working_dir: "/app"
    volumes:
      - .:/app
    # Запускаем и воркер Taskiq, и самого бота (через polling для простоты)
    command: sh -c "taskiq worker -fsd backend.bot_gateway.tasks:broker & python -m backend.bot_gateway.main"
    restart: always
    env_file:
      - ".env"
    depends_on:
      - pg_database
      - rabbitmq
      - core-api

  rabbitmq: # Новый сервис RabbitMQ
    image: rabbitmq:3.12-management # Используем образ с UI
    ports:
      - "5672:5672"   # Порт для подключения приложений
      - "15672:15672" # Порт для веб-интерфейса управления
    restart: always
    env_file:
      - ".env"
    volumes:
      - "rabbitmq_data:/var/lib/rabbitmq"

  pg_database:
    image: postgres:16
    ports:
      - "5439:5432"
    restart: always
    volumes:
      - pg_data:/var/lib/postgresql/data
    env_file:
      - '.env'
    # ... остальные настройки postgres без изменений ...

  # pg_database_test без изменений

volumes:
  pg_data:
  rabbitmq_data: # Новый volume для RabbitMQ

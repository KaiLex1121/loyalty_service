"""First

Revision ID: d834de30dea9
Revises:
Create Date: 2025-08-14 17:23:23.585769

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "d834de30dea9"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "accounts",
        sa.Column("phone_number", sa.String(length=20), nullable=False),
        sa.Column("telegram_user_id", sa.BigInteger(), nullable=True),
        sa.Column("telegram_username", sa.String(), nullable=True),
        sa.Column("hashed_password", sa.String(length=255), nullable=True),
        sa.Column("full_name", sa.String(length=300), nullable=True),
        sa.Column("email", sa.String(length=255), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__accounts")),
    )
    op.create_index(
        op.f("ix__accounts_deleted_at"), "accounts", ["deleted_at"], unique=False
    )
    op.create_index(op.f("ix__accounts_email"), "accounts", ["email"], unique=True)
    op.create_index(op.f("ix__accounts_id"), "accounts", ["id"], unique=False)
    op.create_index(
        op.f("ix__accounts_phone_number"), "accounts", ["phone_number"], unique=True
    )
    op.create_index(
        op.f("ix__accounts_telegram_user_id"),
        "accounts",
        ["telegram_user_id"],
        unique=True,
    )
    op.create_index(
        op.f("ix__accounts_telegram_username"),
        "accounts",
        ["telegram_username"],
        unique=False,
    )
    op.create_table(
        "tariff_plans",
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("internal_name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("default_price", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column(
            "currency",
            sa.Enum("RUB", "USD", "EUR", name="currency_enum", inherit_schema=True),
            nullable=False,
        ),
        sa.Column(
            "billing_period",
            sa.Enum(
                "MONTHLY",
                "QUARTERLY",
                "HALF_YEARLY",
                "ANNUALLY",
                "ONE_TIME",
                name="tariff_payment_cycle_enum",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column("max_outlets", sa.Integer(), nullable=True),
        sa.Column("max_employees", sa.Integer(), nullable=True),
        sa.Column("max_active_promotions", sa.Integer(), nullable=True),
        sa.Column("features", sa.JSON(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "ACTIVE",
                "ARCHIVED",
                "HIDDEN",
                name="tariff_status_enum",
                inherit_schema=True,
                create_constraint=True,
            ),
            nullable=False,
        ),
        sa.Column("is_public", sa.Boolean(), nullable=False),
        sa.Column("sort_order", sa.Integer(), nullable=False),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__tariff_plans")),
        sa.UniqueConstraint(
            "internal_name", name=op.f("uq__tariff_plans__internal_name")
        ),
        sa.UniqueConstraint("name", name=op.f("uq__tariff_plans__name")),
    )
    op.create_index(
        op.f("ix__tariff_plans_deleted_at"),
        "tariff_plans",
        ["deleted_at"],
        unique=False,
    )
    op.create_index(op.f("ix__tariff_plans_id"), "tariff_plans", ["id"], unique=False)
    op.create_index(
        op.f("ix__tariff_plans_status"), "tariff_plans", ["status"], unique=False
    )
    op.create_table(
        "otp_codes",
        sa.Column("hashed_code", sa.String(length=255), nullable=False),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("is_used", sa.Boolean(), nullable=False),
        sa.Column(
            "purpose",
            sa.Enum(
                "BACKOFFICE_LOGIN",
                "PHONE_RESET",
                "TRANSACTION_CONFIRMATION",
                "EMPLOYEE_VERIFICATION",
                "CUSTOMER_VERIFICATION",
                "EMAIL_VERIFICATION",
                name="otp_purpose_enum",
                inherit_schema=True,
                create_constraint=True,
            ),
            nullable=False,
        ),
        sa.Column("attempts", sa.Integer(), nullable=False),
        sa.Column("channel", sa.String(length=50), nullable=False),
        sa.Column("account_id", sa.BigInteger(), nullable=False),
        sa.Column("meta", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
            name=op.f("fk__otp_codes__account_id__accounts"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__otp_codes")),
    )
    op.create_index(
        op.f("ix__otp_codes_deleted_at"), "otp_codes", ["deleted_at"], unique=False
    )
    op.create_index(op.f("ix__otp_codes_id"), "otp_codes", ["id"], unique=False)
    op.create_table(
        "user_roles",
        sa.Column("account_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "access_level",
            sa.Enum(
                "FULL_ADMIN",
                "COMPANY_OWNER",
                "COMPANY_MANAGER",
                "SUPPORT_SPECIALIST",
                name="user_access_level_enum",
                inherit_schema=True,
                create_constraint=True,
            ),
            nullable=False,
        ),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
            name=op.f("fk__user_roles__account_id__accounts"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__user_roles")),
        sa.UniqueConstraint("account_id", name=op.f("uq__user_roles__account_id")),
    )
    op.create_index(
        op.f("ix__user_roles_deleted_at"), "user_roles", ["deleted_at"], unique=False
    )
    op.create_index(op.f("ix__user_roles_id"), "user_roles", ["id"], unique=False)
    op.create_table(
        "companies",
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("owner_user_role_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "DRAFT",
                "PENDING_VERIFICATION",
                "ACTIVE",
                "SUSPENDED",
                "LIMITED",
                "REJECTED",
                "ARCHIVED",
                name="company_status_enum",
                inherit_schema=True,
                create_constraint=True,
            ),
            nullable=False,
        ),
        sa.Column("legal_name", sa.String(length=500), nullable=False),
        sa.Column("short_name", sa.String(length=255), nullable=True),
        sa.Column(
            "legal_form",
            sa.Enum(
                "OOO",
                "IP",
                "AO",
                "ZAO",
                "SELF_EMPLOYED",
                "OTHER",
                name="legal_form_enum",
                inherit_schema=True,
                create_constraint=True,
            ),
            nullable=False,
        ),
        sa.Column("inn", sa.String(length=12), nullable=False),
        sa.Column("kpp", sa.String(length=9), nullable=True),
        sa.Column("ogrn", sa.String(length=15), nullable=True),
        sa.Column("legal_address", sa.String(length=500), nullable=True),
        sa.Column("representative_full_name", sa.String(length=255), nullable=True),
        sa.Column("bank_name", sa.String(length=255), nullable=True),
        sa.Column("bik", sa.String(length=9), nullable=True),
        sa.Column("correspondent_account", sa.String(length=20), nullable=True),
        sa.Column("payment_account", sa.String(length=20), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["owner_user_role_id"],
            ["user_roles.id"],
            name=op.f("fk__companies__owner_user_role_id__user_roles"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__companies")),
        sa.UniqueConstraint("ogrn", name=op.f("uq__companies__ogrn")),
    )
    op.create_index(
        op.f("ix__companies_deleted_at"), "companies", ["deleted_at"], unique=False
    )
    op.create_index(op.f("ix__companies_id"), "companies", ["id"], unique=False)
    op.create_index(op.f("ix__companies_inn"), "companies", ["inn"], unique=True)
    op.create_index(op.f("ix__companies_name"), "companies", ["name"], unique=False)
    op.create_index(op.f("ix__companies_status"), "companies", ["status"], unique=False)
    op.create_table(
        "company_default_cashback_configs",
        sa.Column("company_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "default_percentage", sa.Numeric(precision=5, scale=2), nullable=False
        ),
        sa.Column("is_active", sa.Boolean(), server_default="true", nullable=False),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name="fk_comp_def_cash_conf_comp_id_companies",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "id", name=op.f("pk__company_default_cashback_configs")
        ),
    )
    op.create_index(
        op.f("ix__company_default_cashback_configs_company_id"),
        "company_default_cashback_configs",
        ["company_id"],
        unique=True,
    )
    op.create_index(
        op.f("ix__company_default_cashback_configs_deleted_at"),
        "company_default_cashback_configs",
        ["deleted_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix__company_default_cashback_configs_id"),
        "company_default_cashback_configs",
        ["id"],
        unique=False,
    )
    op.create_table(
        "customer_roles",
        sa.Column("account_id", sa.BigInteger(), nullable=False),
        sa.Column("company_id", sa.BigInteger(), nullable=False),
        sa.Column("birth_date", sa.Date(), nullable=True),
        sa.Column(
            "cashback_balance",
            sa.Numeric(precision=12, scale=2),
            server_default="0.00",
            nullable=False,
        ),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
            name=op.f("fk__customer_roles__account_id__accounts"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk__customer_roles__company_id__companies"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__customer_roles")),
        sa.UniqueConstraint(
            "account_id", "company_id", name="uq_customer_role_account_company"
        ),
    )
    op.create_index(
        op.f("ix__customer_roles_deleted_at"),
        "customer_roles",
        ["deleted_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix__customer_roles_id"), "customer_roles", ["id"], unique=False
    )
    op.create_table(
        "employee_roles",
        sa.Column("account_id", sa.BigInteger(), nullable=False),
        sa.Column("position", sa.String(length=100), nullable=True),
        sa.Column("work_phone_number", sa.String(length=20), nullable=True),
        sa.Column("work_full_name", sa.String(length=555), nullable=True),
        sa.Column("work_email", sa.String(length=255), nullable=True),
        sa.Column("company_id", sa.BigInteger(), nullable=False),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
            name=op.f("fk__employee_roles__account_id__accounts"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk__employee_roles__company_id__companies"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__employee_roles")),
        sa.UniqueConstraint("account_id", name=op.f("uq__employee_roles__account_id")),
    )
    op.create_index(
        op.f("ix__employee_roles_deleted_at"),
        "employee_roles",
        ["deleted_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix__employee_roles_id"), "employee_roles", ["id"], unique=False
    )
    op.create_index(
        op.f("ix__employee_roles_work_email"),
        "employee_roles",
        ["work_email"],
        unique=False,
    )
    op.create_index(
        op.f("ix__employee_roles_work_phone_number"),
        "employee_roles",
        ["work_phone_number"],
        unique=False,
    )
    op.create_table(
        "notification_messages",
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("body", sa.Text(), nullable=False),
        sa.Column("target_segment", sa.String(length=255), nullable=True),
        sa.Column(
            "sent_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("status", sa.String(length=50), nullable=False),
        sa.Column("company_id", sa.BigInteger(), nullable=False),
        sa.Column("created_by_user_role_id", sa.BigInteger(), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk__notification_messages__company_id__companies"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["created_by_user_role_id"],
            ["user_roles.id"],
            name=op.f("fk__notification_messages__created_by_user_role_id__user_roles"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__notification_messages")),
    )
    op.create_index(
        op.f("ix__notification_messages_deleted_at"),
        "notification_messages",
        ["deleted_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix__notification_messages_id"),
        "notification_messages",
        ["id"],
        unique=False,
    )
    op.create_table(
        "outlets",
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("address", sa.String(length=500), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "OPEN",
                "TEMPORARILY_CLOSED",
                "ARCHIVED",
                "CLOSED_PERMANENTLY",
                name="outlet_status_enum",
                inherit_schema=True,
                create_constraint=True,
            ),
            nullable=False,
        ),
        sa.Column("company_id", sa.BigInteger(), nullable=False),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk__outlets__company_id__companies"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__outlets")),
    )
    op.create_index(
        op.f("ix__outlets_deleted_at"), "outlets", ["deleted_at"], unique=False
    )
    op.create_index(op.f("ix__outlets_id"), "outlets", ["id"], unique=False)
    op.create_index(op.f("ix__outlets_status"), "outlets", ["status"], unique=False)
    op.create_table(
        "promotions",
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("company_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "promotion_type",
            sa.Enum(
                "CASHBACK",
                "GIFT_AWARD",
                "POINTS_MULTIPLIER",
                name="promotion_type_enum",
                inherit_schema=True,
                create_constraint=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "DRAFT",
                "SCHEDULED",
                "ACTIVE",
                "PAUSED",
                "FINISHED",
                "ARCHIVED",
                name="promotion_status_enum",
                inherit_schema=True,
                create_constraint=True,
            ),
            nullable=False,
        ),
        sa.Column("start_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("end_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("priority", sa.Integer(), server_default="0", nullable=False),
        sa.Column(
            "min_purchase_amount", sa.Numeric(precision=12, scale=2), nullable=True
        ),
        sa.Column("max_uses_per_customer", sa.Integer(), nullable=True),
        sa.Column("max_total_uses", sa.Integer(), nullable=True),
        sa.Column(
            "current_total_uses", sa.Integer(), server_default="0", nullable=False
        ),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["company_id"], ["companies.id"], name="fk_promotions_company_id_companies"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__promotions")),
        sa.UniqueConstraint("company_id", "name", name="uq_promotion_company_name"),
    )
    op.create_index(
        op.f("ix__promotions_company_id"), "promotions", ["company_id"], unique=False
    )
    op.create_index(
        op.f("ix__promotions_deleted_at"), "promotions", ["deleted_at"], unique=False
    )
    op.create_index(op.f("ix__promotions_id"), "promotions", ["id"], unique=False)
    op.create_index(
        op.f("ix__promotions_priority"), "promotions", ["priority"], unique=False
    )
    op.create_index(
        op.f("ix__promotions_status"), "promotions", ["status"], unique=False
    )
    op.create_table(
        "subscriptions",
        sa.Column("company_id", sa.BigInteger(), nullable=False),
        sa.Column("tariff_plan_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "TRIALING",
                "ACTIVE",
                "PAST_DUE",
                "CANCELED",
                "EXPIRED",
                "INCOMPLETE",
                "INCOMPLETE_EXPIRED",
                "UNPAID",
                name="subscription_status_enum",
                inherit_schema=True,
                create_constraint=True,
            ),
            nullable=False,
        ),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=True),
        sa.Column("trial_end_date", sa.Date(), nullable=True),
        sa.Column("next_billing_date", sa.Date(), nullable=True),
        sa.Column("current_price", sa.Numeric(precision=10, scale=2), nullable=True),
        sa.Column(
            "current_billing_cycle",
            sa.Enum(
                "MONTHLY",
                "QUARTERLY",
                "HALF_YEARLY",
                "ANNUALLY",
                "ONE_TIME",
                name="subscription_payment_cycle_enum",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column("auto_renew", sa.Boolean(), nullable=False),
        sa.Column("canceled_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk__subscriptions__company_id__companies"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["tariff_plan_id"],
            ["tariff_plans.id"],
            name=op.f("fk__subscriptions__tariff_plan_id__tariff_plans"),
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__subscriptions")),
    )
    op.create_index(
        op.f("ix__subscriptions_company_id"),
        "subscriptions",
        ["company_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix__subscriptions_deleted_at"),
        "subscriptions",
        ["deleted_at"],
        unique=False,
    )
    op.create_index(op.f("ix__subscriptions_id"), "subscriptions", ["id"], unique=False)
    op.create_index(
        op.f("ix__subscriptions_next_billing_date"),
        "subscriptions",
        ["next_billing_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix__subscriptions_status"), "subscriptions", ["status"], unique=False
    )
    op.create_index(
        op.f("ix__subscriptions_tariff_plan_id"),
        "subscriptions",
        ["tariff_plan_id"],
        unique=False,
    )
    op.create_table(
        "telegram_bots",
        sa.Column("token", sa.String(), nullable=False),
        sa.Column(
            "bot_type",
            sa.Enum("CUSTOMER", "EMPLOYEE", name="bottypeenum"),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("company_id", sa.BigInteger(), nullable=False),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk__telegram_bots__company_id__companies"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__telegram_bots")),
    )
    op.create_index(
        op.f("ix__telegram_bots_deleted_at"),
        "telegram_bots",
        ["deleted_at"],
        unique=False,
    )
    op.create_index(op.f("ix__telegram_bots_id"), "telegram_bots", ["id"], unique=False)
    op.create_index(
        op.f("ix__telegram_bots_token"), "telegram_bots", ["token"], unique=True
    )
    op.create_table(
        "cashback_configs",
        sa.Column("promotion_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "cashback_type",
            postgresql.ENUM("PERCENTAGE", "FIXED_AMOUNT", name="cashback_type_enum"),
            nullable=False,
        ),
        sa.Column(
            "cashback_percentage", sa.Numeric(precision=5, scale=2), nullable=True
        ),
        sa.Column("cashback_amount", sa.Numeric(precision=12, scale=2), nullable=True),
        sa.Column(
            "max_cashback_per_transaction",
            sa.Numeric(precision=12, scale=2),
            nullable=True,
        ),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["promotion_id"],
            ["promotions.id"],
            name="fk_cashback_configs_promotion_id_promotions",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__cashback_configs")),
        sa.UniqueConstraint(
            "promotion_id", name=op.f("uq__cashback_configs__promotion_id")
        ),
    )
    op.create_index(
        op.f("ix__cashback_configs_deleted_at"),
        "cashback_configs",
        ["deleted_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix__cashback_configs_id"), "cashback_configs", ["id"], unique=False
    )
    op.create_table(
        "customer_promotion_progress",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("customer_id", sa.Integer(), nullable=False),
        sa.Column("promotion_id", sa.Integer(), nullable=False),
        sa.Column("current_count", sa.Integer(), nullable=False),
        sa.Column("last_purchase_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column("completed_cycles", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["promotion_id"],
            ["promotions.id"],
            name=op.f("fk__customer_promotion_progress__promotion_id__promotions"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__customer_promotion_progress")),
        sa.UniqueConstraint(
            "customer_id", "promotion_id", name="uq_customer_promotion_progress"
        ),
    )
    op.create_index(
        op.f("ix__customer_promotion_progress_deleted_at"),
        "customer_promotion_progress",
        ["deleted_at"],
        unique=False,
    )
    op.create_table(
        "employee_role_outlet_association",
        sa.Column("employee_role_id", sa.BigInteger(), nullable=False),
        sa.Column("outlet_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["employee_role_id"],
            ["employee_roles.id"],
            name=op.f(
                "fk__employee_role_outlet_association__employee_role_id__employee_roles"
            ),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["outlet_id"],
            ["outlets.id"],
            name=op.f("fk__employee_role_outlet_association__outlet_id__outlets"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "employee_role_id",
            "outlet_id",
            name=op.f("pk__employee_role_outlet_association"),
        ),
    )
    op.create_table(
        "gift_configs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("promotion_id", sa.Integer(), nullable=False),
        sa.Column(
            "gift_type",
            sa.Enum(
                "NTH_ITEM_FREE",
                "BUY_X_GET_Y_FREE",
                "ACCUMULATION_GIFT",
                "PURCHASE_THRESHOLD_GIFT",
                "PRODUCT_GIFT",
                name="gifttypeenum",
            ),
            nullable=False,
        ),
        sa.Column("nth_item", sa.Integer(), nullable=True),
        sa.Column("buy_quantity", sa.Integer(), nullable=True),
        sa.Column("get_quantity", sa.Integer(), nullable=True),
        sa.Column("accumulation_target", sa.Integer(), nullable=True),
        sa.Column("threshold_amount", sa.Numeric(precision=10, scale=2), nullable=True),
        sa.Column("gift_description", sa.String(length=500), nullable=False),
        sa.Column("gift_product_id", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["promotion_id"],
            ["promotions.id"],
            name=op.f("fk__gift_configs__promotion_id__promotions"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__gift_configs")),
        sa.UniqueConstraint(
            "promotion_id", name=op.f("uq__gift_configs__promotion_id")
        ),
    )
    op.create_index(
        op.f("ix__gift_configs_deleted_at"),
        "gift_configs",
        ["deleted_at"],
        unique=False,
    )
    op.create_table(
        "points_multiplier_configs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("promotion_id", sa.Integer(), nullable=False),
        sa.Column("multiplier", sa.Numeric(precision=5, scale=2), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["promotion_id"],
            ["promotions.id"],
            name=op.f("fk__points_multiplier_configs__promotion_id__promotions"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__points_multiplier_configs")),
        sa.UniqueConstraint(
            "promotion_id", name=op.f("uq__points_multiplier_configs__promotion_id")
        ),
    )
    op.create_index(
        op.f("ix__points_multiplier_configs_deleted_at"),
        "points_multiplier_configs",
        ["deleted_at"],
        unique=False,
    )
    op.create_table(
        "promotion_product_filters",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("promotion_id", sa.Integer(), nullable=False),
        sa.Column("product_id", sa.Integer(), nullable=True),
        sa.Column("category_id", sa.Integer(), nullable=True),
        sa.Column("brand_id", sa.Integer(), nullable=True),
        sa.Column("include", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["promotion_id"],
            ["promotions.id"],
            name=op.f("fk__promotion_product_filters__promotion_id__promotions"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__promotion_product_filters")),
    )
    op.create_index(
        op.f("ix__promotion_product_filters_deleted_at"),
        "promotion_product_filters",
        ["deleted_at"],
        unique=False,
    )
    op.create_table(
        "transactions",
        sa.Column(
            "transaction_type",
            sa.Enum(
                "ACCRUAL_PURCHASE",
                "SPENDING_PURCHASE",
                "ACCRUAL_MANUAL",
                "SPENDING_MANUAL",
                "ACCRUAL_REFUND",
                "SPENDING_REFUND",
                "EXPIRATION",
                name="transaction_type_enum",
            ),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING",
                "COMPLETED",
                "FAILED",
                "REVERTED",
                "CANCELED",
                name="transaction_status_enum",
            ),
            server_default="COMPLETED",
            nullable=False,
        ),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column("purchase_amount", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column(
            "cashback_accrued", sa.Numeric(precision=10, scale=2), nullable=False
        ),
        sa.Column("cashback_spent", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column(
            "transaction_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("balance_after", sa.Numeric(precision=12, scale=2), nullable=True),
        sa.Column("performed_by_employee_id", sa.BigInteger(), nullable=True),
        sa.Column("customer_role_id", sa.BigInteger(), nullable=False),
        sa.Column("company_id", sa.BigInteger(), nullable=False),
        sa.Column("outlet_id", sa.BigInteger(), nullable=True),
        sa.Column(
            "performed_by_admin_profile_id",
            sa.BigInteger(),
            nullable=True,
            comment="Администратор, выполнивший операцию (для ручных начислений/списаний)",
        ),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk__transactions__company_id__companies"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["customer_role_id"],
            ["customer_roles.id"],
            name=op.f("fk__transactions__customer_role_id__customer_roles"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["outlet_id"],
            ["outlets.id"],
            name=op.f("fk__transactions__outlet_id__outlets"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["performed_by_admin_profile_id"],
            ["user_roles.id"],
            name="fk_transactions_performed_by_admin_profile_id_user_roles",
        ),
        sa.ForeignKeyConstraint(
            ["performed_by_employee_id"],
            ["employee_roles.id"],
            name=op.f("fk__transactions__performed_by_employee_id__employee_roles"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__transactions")),
    )
    op.create_index(
        op.f("ix__transactions_deleted_at"),
        "transactions",
        ["deleted_at"],
        unique=False,
    )
    op.create_index(op.f("ix__transactions_id"), "transactions", ["id"], unique=False)
    op.create_index(
        op.f("ix__transactions_performed_by_admin_profile_id"),
        "transactions",
        ["performed_by_admin_profile_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix__transactions_performed_by_employee_id"),
        "transactions",
        ["performed_by_employee_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix__transactions_status"), "transactions", ["status"], unique=False
    )
    op.create_index(
        op.f("ix__transactions_transaction_type"),
        "transactions",
        ["transaction_type"],
        unique=False,
    )
    op.create_table(
        "promotion_usages",
        sa.Column("promotion_id", sa.BigInteger(), nullable=False),
        sa.Column("customer_role_id", sa.BigInteger(), nullable=False),
        sa.Column("transaction_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "cashback_accrued", sa.Numeric(precision=12, scale=2), nullable=False
        ),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("deleted_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["customer_role_id"],
            ["customer_roles.id"],
            name="fk_promotion_usages_customer_role_id_customer_roles",
        ),
        sa.ForeignKeyConstraint(
            ["promotion_id"],
            ["promotions.id"],
            name="fk_promotion_usages_promotion_id_promotions",
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["transaction_id"],
            ["transactions.id"],
            name="fk_promotion_usages_transaction_id_transactions",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__promotion_usages")),
        sa.UniqueConstraint(
            "promotion_id", "transaction_id", name="uq_promotion_transaction_usage"
        ),
        sa.UniqueConstraint(
            "transaction_id", name=op.f("uq__promotion_usages__transaction_id")
        ),
    )
    op.create_index(
        op.f("ix__promotion_usages_customer_role_id"),
        "promotion_usages",
        ["customer_role_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix__promotion_usages_deleted_at"),
        "promotion_usages",
        ["deleted_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix__promotion_usages_id"), "promotion_usages", ["id"], unique=False
    )
    op.create_index(
        op.f("ix__promotion_usages_promotion_id"),
        "promotion_usages",
        ["promotion_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix__promotion_usages_promotion_id"), table_name="promotion_usages"
    )
    op.drop_index(op.f("ix__promotion_usages_id"), table_name="promotion_usages")
    op.drop_index(
        op.f("ix__promotion_usages_deleted_at"), table_name="promotion_usages"
    )
    op.drop_index(
        op.f("ix__promotion_usages_customer_role_id"), table_name="promotion_usages"
    )
    op.drop_table("promotion_usages")
    op.drop_index(op.f("ix__transactions_transaction_type"), table_name="transactions")
    op.drop_index(op.f("ix__transactions_status"), table_name="transactions")
    op.drop_index(
        op.f("ix__transactions_performed_by_employee_id"), table_name="transactions"
    )
    op.drop_index(
        op.f("ix__transactions_performed_by_admin_profile_id"),
        table_name="transactions",
    )
    op.drop_index(op.f("ix__transactions_id"), table_name="transactions")
    op.drop_index(op.f("ix__transactions_deleted_at"), table_name="transactions")
    op.drop_table("transactions")
    op.drop_index(
        op.f("ix__promotion_product_filters_deleted_at"),
        table_name="promotion_product_filters",
    )
    op.drop_table("promotion_product_filters")
    op.drop_index(
        op.f("ix__points_multiplier_configs_deleted_at"),
        table_name="points_multiplier_configs",
    )
    op.drop_table("points_multiplier_configs")
    op.drop_index(op.f("ix__gift_configs_deleted_at"), table_name="gift_configs")
    op.drop_table("gift_configs")
    op.drop_table("employee_role_outlet_association")
    op.drop_index(
        op.f("ix__customer_promotion_progress_deleted_at"),
        table_name="customer_promotion_progress",
    )
    op.drop_table("customer_promotion_progress")
    op.drop_index(op.f("ix__cashback_configs_id"), table_name="cashback_configs")
    op.drop_index(
        op.f("ix__cashback_configs_deleted_at"), table_name="cashback_configs"
    )
    op.drop_table("cashback_configs")
    op.drop_index(op.f("ix__telegram_bots_token"), table_name="telegram_bots")
    op.drop_index(op.f("ix__telegram_bots_id"), table_name="telegram_bots")
    op.drop_index(op.f("ix__telegram_bots_deleted_at"), table_name="telegram_bots")
    op.drop_table("telegram_bots")
    op.drop_index(op.f("ix__subscriptions_tariff_plan_id"), table_name="subscriptions")
    op.drop_index(op.f("ix__subscriptions_status"), table_name="subscriptions")
    op.drop_index(
        op.f("ix__subscriptions_next_billing_date"), table_name="subscriptions"
    )
    op.drop_index(op.f("ix__subscriptions_id"), table_name="subscriptions")
    op.drop_index(op.f("ix__subscriptions_deleted_at"), table_name="subscriptions")
    op.drop_index(op.f("ix__subscriptions_company_id"), table_name="subscriptions")
    op.drop_table("subscriptions")
    op.drop_index(op.f("ix__promotions_status"), table_name="promotions")
    op.drop_index(op.f("ix__promotions_priority"), table_name="promotions")
    op.drop_index(op.f("ix__promotions_id"), table_name="promotions")
    op.drop_index(op.f("ix__promotions_deleted_at"), table_name="promotions")
    op.drop_index(op.f("ix__promotions_company_id"), table_name="promotions")
    op.drop_table("promotions")
    op.drop_index(op.f("ix__outlets_status"), table_name="outlets")
    op.drop_index(op.f("ix__outlets_id"), table_name="outlets")
    op.drop_index(op.f("ix__outlets_deleted_at"), table_name="outlets")
    op.drop_table("outlets")
    op.drop_index(
        op.f("ix__notification_messages_id"), table_name="notification_messages"
    )
    op.drop_index(
        op.f("ix__notification_messages_deleted_at"), table_name="notification_messages"
    )
    op.drop_table("notification_messages")
    op.drop_index(
        op.f("ix__employee_roles_work_phone_number"), table_name="employee_roles"
    )
    op.drop_index(op.f("ix__employee_roles_work_email"), table_name="employee_roles")
    op.drop_index(op.f("ix__employee_roles_id"), table_name="employee_roles")
    op.drop_index(op.f("ix__employee_roles_deleted_at"), table_name="employee_roles")
    op.drop_table("employee_roles")
    op.drop_index(op.f("ix__customer_roles_id"), table_name="customer_roles")
    op.drop_index(op.f("ix__customer_roles_deleted_at"), table_name="customer_roles")
    op.drop_table("customer_roles")
    op.drop_index(
        op.f("ix__company_default_cashback_configs_id"),
        table_name="company_default_cashback_configs",
    )
    op.drop_index(
        op.f("ix__company_default_cashback_configs_deleted_at"),
        table_name="company_default_cashback_configs",
    )
    op.drop_index(
        op.f("ix__company_default_cashback_configs_company_id"),
        table_name="company_default_cashback_configs",
    )
    op.drop_table("company_default_cashback_configs")
    op.drop_index(op.f("ix__companies_status"), table_name="companies")
    op.drop_index(op.f("ix__companies_name"), table_name="companies")
    op.drop_index(op.f("ix__companies_inn"), table_name="companies")
    op.drop_index(op.f("ix__companies_id"), table_name="companies")
    op.drop_index(op.f("ix__companies_deleted_at"), table_name="companies")
    op.drop_table("companies")
    op.drop_index(op.f("ix__user_roles_id"), table_name="user_roles")
    op.drop_index(op.f("ix__user_roles_deleted_at"), table_name="user_roles")
    op.drop_table("user_roles")
    op.drop_index(op.f("ix__otp_codes_id"), table_name="otp_codes")
    op.drop_index(op.f("ix__otp_codes_deleted_at"), table_name="otp_codes")
    op.drop_table("otp_codes")
    op.drop_index(op.f("ix__tariff_plans_status"), table_name="tariff_plans")
    op.drop_index(op.f("ix__tariff_plans_id"), table_name="tariff_plans")
    op.drop_index(op.f("ix__tariff_plans_deleted_at"), table_name="tariff_plans")
    op.drop_table("tariff_plans")
    op.drop_index(op.f("ix__accounts_telegram_username"), table_name="accounts")
    op.drop_index(op.f("ix__accounts_telegram_user_id"), table_name="accounts")
    op.drop_index(op.f("ix__accounts_phone_number"), table_name="accounts")
    op.drop_index(op.f("ix__accounts_id"), table_name="accounts")
    op.drop_index(op.f("ix__accounts_email"), table_name="accounts")
    op.drop_index(op.f("ix__accounts_deleted_at"), table_name="accounts")
    op.drop_table("accounts")
    # ### end Alembic commands ###
